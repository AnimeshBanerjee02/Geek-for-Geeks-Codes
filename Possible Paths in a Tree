#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

class Solution {
public:
    int ans;

    int root(int i, vector<int>& parent) {
        while (parent[i] != i) {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }

    int Union(int a, int b, vector<int>& parent, vector<int>& sz) {
        int ra = root(a, parent);
        int rb = root(b, parent);
        if (ra == rb)
            return sz[ra] * sz[ra];
            
        if (sz[ra] < sz[rb]) {
            swap(ra, rb);
            swap(a, b);
        }

        ans += sz[ra] * sz[rb];
        parent[rb] = ra;
        sz[ra] += sz[rb];

        return ans;
    }

    vector<int> maximumWeight(int n, vector<vector<int>>& edges, int q, vector<int>& queries) {
        ans = 0;

        vector<int> parent(n + 1);
        vector<int> sz(n + 1);

        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            sz[i] = 1;
        }

        vector<vector<int>> wt;

        for (int i = 0; i < n - 1; i++)
            wt.push_back({edges[i][2], edges[i][0], edges[i][1]});

        sort(wt.begin(), wt.end());

        map<int, int> mp;

        for (int i = 0; i < n - 1; i++) {
            int a = wt[i][0];
            int b = wt[i][1];
            int c = wt[i][2];
            mp[a] = Union(b, c, parent, sz);
        }

        vector<int> res;

        for (int i = 0; i < q; i++) {
            auto it = mp.upper_bound(queries[i]);
            if (it == mp.begin())
                res.push_back(0);
            else {
                it--;
                res.push_back(it->second);
            }
        }

        return res;
    }
};
