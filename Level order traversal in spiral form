/* A binary tree node has data, pointer to left child
   and a pointer to right child */


vector<int> findSpiral(Node *root) {
    vector<int> result;
    if (root == nullptr)
        return result;

    stack<Node*> s1; // Right to left
    stack<Node*> s2; // Left to right

    s1.push(root); // Push root to start with

    while (!s1.empty() || !s2.empty()) {
        while (!s1.empty()) {
            Node* temp = s1.top();
            s1.pop();
            result.push_back(temp->data);

            // Push right child before left child
            if (temp->right)
                s2.push(temp->right);
            if (temp->left)
                s2.push(temp->left);
        }

        while (!s2.empty()) {
            Node* temp = s2.top();
            s2.pop();
            result.push_back(temp->data);

            // Push left child before right child
            if (temp->left)
                s1.push(temp->left);
            if (temp->right)
                s1.push(temp->right);
        }
    }

    return result;
}
