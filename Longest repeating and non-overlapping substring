class Solution:
    def longestSubstring(self, s, n):
        if n <= 1:
            return "-1"
        
        # Initialize a 2D array to store the length of the longest repeating non-overlapping substring
        dp = [[0] * (n + 1) for _ in range(n + 1)]
        
        max_length = 0
        end_index = 0
        
        for i in range(1, n + 1):
            for j in range(i + 1, n + 1):
                if s[i - 1] == s[j - 1] and dp[i - 1][j - 1] < j - i:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                    if dp[i][j] > max_length:
                        max_length = dp[i][j]
                        end_index = i
                    
                else:
                    dp[i][j] = 0
        
        if max_length == 0:
            return "-1"
        else:
            return s[end_index - max_length:end_index]
