//User function Template for C++

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
    vector<int> disc; 
    vector<int> low;  
    vector<bool> visited;
    vector<vector<int>> result;
    
    void dfs(int u, int parent, int &time, vector<int> adj[]) {
        visited[u] = true;
        disc[u] = low[u] = time++;
        
        for (int v : adj[u]) {
            if (v == parent) continue; 
            
            if (!visited[v]) {
                dfs(v, u, time, adj);
                low[u] = min(low[u], low[v]);
                
                if (low[v] > disc[u]) 
                    result.push_back({min(u, v), max(u, v)});
            } else {
                low[u] = min(low[u], disc[v]);
            }
        }
    }
    
public:
    vector<vector<int>> criticalConnections(int v, vector<int> adj[]) {
        disc.assign(v, -1);
        low.assign(v, -1);
        visited.assign(v, false);
        result.clear();
        
        int time = 0;
        for (int i = 0; i < v; ++i) {
            if (!visited[i])
                dfs(i, -1, time, adj);
        }
        
        sort(result.begin(), result.end());
        return result;
    }
};
