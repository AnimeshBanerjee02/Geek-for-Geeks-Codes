#User function Template for python3

class Solution:
    def __init__(self):
        self.result = None

    def generate_strings(self, length, base):
        def dfs(n, k, current_string, result_set):
            if n == 0:
                result_set.add(current_string)
                return result_set

            for i in range(k):
                result_set = dfs(n - 1, k, current_string + str(i), result_set)

            return result_set

        ans_set = set()
        ans_set = dfs(length, base, '', ans_set)
        return ans_set

    def build_graph(self, strings, base):
        graph = {}

        for i in strings:
            for z in range(base):
                neighbor = i[1:] + str(z)
                if neighbor in strings and neighbor != i:
                    if i in graph:
                        graph[i].append(neighbor)
                    else:
                        graph[i] = [neighbor]

        return graph

    def findString(self, N, K):
        strings = self.generate_strings(N, K)
        graph = self.build_graph(strings, K)
        visited = set()

        def find(ele, current_string):
            visited.add(ele)

            if len(visited) == (K ** N):
                self.result = current_string
                return True

            for neighbor in graph[ele]:
                if neighbor not in visited and find(neighbor, current_string + neighbor[-1]):
                    return True

            visited.remove(ele)
            return False

        for i in strings:
            if find(i, i):
                return self.result

        return self.result
