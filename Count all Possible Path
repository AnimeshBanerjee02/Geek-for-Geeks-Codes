#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:
    bool isEulerianCycle(vector<vector<int>>& paths) {
        int n = paths.size();

        for (int i = 0; i < n; ++i) {
            int degree = 0;
            for (int j = 0; j < n; ++j) {
                degree += paths[i][j];
            }
            if (degree % 2 != 0) {
                return false; 
            }
        }

        return true;
    }

    int isPossible(vector<vector<int>>& paths) {
        int n = paths.size();

        
        if (!isEulerianCycle(paths)) {
            return 0; 
        }

        
        vector<bool> visited(n, false);
        dfs(paths, 0, visited);
        for (bool v : visited) {
            if (!v) {
                return 0; 
            }
        }

        return 1;
    }

private:
    void dfs(vector<vector<int>>& paths, int curr, vector<bool>& visited) {
        visited[curr] = true;
        for (int i = 0; i < paths[curr].size(); ++i) {
            if (paths[curr][i] && !visited[i]) {
                dfs(paths, i, visited);
            }
        }
    }
};
