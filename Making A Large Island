from typing import List

class Solution:
    def largestIsland(self, grid: List[List[int]]) -> int:
        def dfs(i, j, index):
            if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] != 1:
                return 0
            grid[i][j] = index
            return 1 + dfs(i + 1, j, index) + dfs(i - 1, j, index) + dfs(i, j + 1, index) + dfs(i, j - 1, index)
        
        n = len(grid)
        area = {0: 0}
        index = 2
        max_area = 0
        
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    area[index] = dfs(i, j, index)
                    max_area = max(max_area, area[index])
                    index += 1
        
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen = set()
                    cur_area = 1
                    for dx, dy in directions:
                        x, y = i + dx, j + dy
                        if 0 <= x < n and 0 <= y < n and grid[x][y] > 1 and grid[x][y] not in seen:
                            seen.add(grid[x][y])
                            cur_area += area[grid[x][y]]
                    max_area = max(max_area, cur_area)
        
        return max_area
