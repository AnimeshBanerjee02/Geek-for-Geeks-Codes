import heapq

class Solution:
    
    # Function to return the minimum cost to reach the bottom
    # right cell from the top left cell.
    def minimumCostPath(self, grid):
        n = len(grid)
        
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        
        pq = [(grid[0][0], 0, 0)]
        
        min_cost = [[float('inf')] * n for _ in range(n)]
        min_cost[0][0] = grid[0][0]
        
        while pq:
            cost, x, y = heapq.heappop(pq)
            
            if x == n - 1 and y == n - 1:
                return cost
            
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                
                if 0 <= nx < n and 0 <= ny < n:
                    new_cost = cost + grid[nx][ny]
                    
                    if new_cost < min_cost[nx][ny]:
                        min_cost[nx][ny] = new_cost
                        heapq.heappush(pq, (new_cost, nx, ny))
        
        return min_cost[n - 1][n - 1]
