class Solution:
    def find(self, parent, x):
        if parent[x] != x:
            parent[x] = self.find(parent, parent[x])
        return parent[x]

    def union(self, parent, rank, x, y):
        x_root = self.find(parent, x)
        y_root = self.find(parent, y)

        if x_root != y_root:
            if rank[x_root] < rank[y_root]:
                parent[x_root] = y_root
            elif rank[x_root] > rank[y_root]:
                parent[y_root] = x_root
            else:
                parent[y_root] = x_root
                rank[x_root] += 1

    def accountsMerge(self, accounts):
        email_to_name = {}
        email_to_id = {}
        parent = {}
        rank = {}

        # Assign unique IDs to each email
        for account in accounts:
            for email in account[1:]:
                if email not in email_to_id:
                    email_to_id[email] = email
                    email_to_name[email] = account[0]
                    parent[email] = email
                    rank[email] = 0

        # Union emails within the same account
        for account in accounts:
            root = self.find(parent, account[1])
            for email in account[2:]:
                self.union(parent, rank, root, email)

        # Group emails by their root
        merged_accounts = {}
        for email in email_to_id:
            root = self.find(parent, email)
            merged_accounts.setdefault(root, []).append(email)

        # Format merged accounts
        formatted_accounts = []
        for root, emails in merged_accounts.items():
            name = email_to_name[emails[0]]  # Take the name from the first email in the account
            formatted_accounts.append([name] + sorted(emails))

        return formatted_accounts
