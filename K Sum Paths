'''
class Node:
    def __init__(self, val):
        self.right = None
        self.data = val
        self.left = None
'''
class Solution:
    def sumK(self, root, k):
        from collections import Counter
        
        def dfs(node: Node, curr_sum: int, prev_sum_counts: Counter[int, int]) -> int:
            if node is None:
                return 0
            curr_sum += node.data
            count = prev_sum_counts[curr_sum - k]
            prev_sum_counts[curr_sum] += 1
            left_count = dfs(node.left, curr_sum, prev_sum_counts)
            right_count = dfs(node.right, curr_sum, prev_sum_counts)
            prev_sum_counts[curr_sum] -= 1
            return count + left_count + right_count
        
        prev_sum_counts = Counter({0: 1})
        return dfs(root, 0, prev_sum_counts)
